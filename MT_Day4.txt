
Types of Testing:
------------------
1.Testing Related to change
	1.Retesting /Confirmation Testing
	What : Re-execution of Failed Test Case
	When : After defect found and Fixed by developer
	Why(Objective)  : To confirm defect has been fixed or not ?
	
	2.Regression Testing		
	What : CHecking impact/effect of Change Part/portion on Unchange 	Part/portion.
	When : After Any Change
		1.Defect fixing
		2.Add New Requirement
		3.Delete/Modify requirement
		4.Environment Change
	
	Why(Objective) : To Make Sure Changes do not introduce 
			new Defect


	Impact Analysis:
	----------------
	A process in which identification of number of dependant
	Pass TC to Fail TC  happens using RTM
	
	Requirement Traceability Matrix/ Bi -Directional Traceability 	Matrix
	-------------------------------------------------------------
	>A Table having Mapping between Requirement & Test Case
	>Very usefull to get requirment Coverage is 100 % or not
	>Used in Regression Testing to calculate number of Test cases 
	for regression Testing.
	>Regression Testing is Repitative in nature hence it should be
	done with Automation Testing.
	Selenium,QTP(UFT)-HP,  RFT-IBM
	
2.Testing Related to Function 
	>Checking Forms(with valid/ invalid data/ with optional /
	without optional field)
	>Checking Links(to identify broken or dead links)
	>Checking Cookies
		>Temp text file created by Server containing user 		information
		>Type:Sessional : Active till Browser is Open
		      Persistant : They have thier own Expiery Date
		>How to Test Cookie:
		1.Check content of Cookie is Encrypted or not
		2.Check cookie is active till session or till
		Expriry date(depending on type of Cookie)
		3.Disabling cookie should not allow important 
		function to work
		4.After Login if Cookies are cleared & some links 
		are click then Login Page should display

	>>Smoke Testing(build verification Testing /Build Acceptance 
	Testing)
	>Decision Making point to accept build or not ?	
	What  ?: Checking Basic/Critical functionality of Build
	When  ?: Before Starting Actual / Detail Testing/System Testing
	Why  ?: 1.To Check Stability/testabilty 
		2.To avoid time wastage 

	Smoke Test & Actual Test

	>>Sanity Testing
	What  ?: Checking Basic/Critical functionality of Build
	When : After Defect fixing/ Add new requirement	 

--------------------------------------------------------------------------
3.Testing Related to Non-Function
1.Performace Testing:
	>Checking Behaviour of System w.r.t Response Time
	Response Time: Time Difference between 1st bit of request
			& last bit of Response
	Latency	     : Time Difference between 1st bit of request
			& 1st bit of Response	
	Throughput   : Number of request processed per unit time
	
	Load Testing : Checking Behavior of System within Customer 
			Specified Load
	Stress Testing:Checking Behavior of System Beyond Customer 
			Specified Load .& Gradully increase Load 
			till your system get crash/Break.To identify
			Break point or Crash point.
	Spike Testing: Done with Sudden Change(Increase/ Decrease)
		       in Load to check Stability

	Endurance/SOak Testing:
			Load is Applied for Longer Duration i.e 
		12 hrs,24 hrs or 45 hrs to check any memory 
		leak


	Performance Testing possible Manually  ?
	NO Its not possible to do Manually even for Single user
	Since Exact response time will not able calculated 
	without tool.

	Apache Jmeter, LoadRunner-HP, RPT-IBM
--------------------------------------------------------------------------
Compatibity Testing:
	>Checking with different OS or Different OS Version
	>Checking with different Browser or Different Browser
	versions for Web Application where any Browser can be 
	used 
	
Configuration Testing(Hardware Compatibility Test)
	>Checking Behaviour of System by adding / Removing 
	Hardware Resources
	>Objective is find minimum hardware resources to provide
	required performance of application/software
	>Hardware Resources like RAM,Processor, LanCard etc.

Usability Testing
	>Deals with Ease of Use
	>Ease of use should be balanced between New User &
	Expericnce User
	>User Surveys & Interviews done for COTS software.

User Interface Testing
	>GUI Testing
	>Checking Color, Font,Size,Allingment,Error Massages
	>User friendlyness 	
	>Should be Consistance in Appearance
----------------------------------------------------------------------
4.Testing Related to Structure > Module 4 > Whilte Box Testing
	



Module 4:
----------
Test Designing Technique:
-------------------------
1.Specification Based Technique
	  
	1.Equivalence Class Partitioning
		1	-  17|18 	60| 61  
		>Group inputs/ outputs accroding to their behavior
		>Select one value from each partition
		>for above Example : 12,50,65
	
	2.Boundary Value Analysis
		1	-  17|18 	60| 61  
		>Group inputs/ outputs accroding to their behavior	 
		>Select Valid Partition
		>+1 & -1 to edges/Boundary of valid partition
	
	Total Test Data: 17,18,19   , 59,60,61  /17,18,25,60,61
	Boundary Values: 17,18,60,61
	Invalid Boundary Values:  17,61
	Valid Boundary Values   : 18,60

Q.In a system designed to work out the tax to be paid: 
An employee has $4000 of salary tax free
The next $1500 is taxed at 10% 
The next $28000 is taxed at 22% 
Any further amount is taxed at 40% 
1. To the nearest $ which of these is a valid Boundary 
Value Analysis test case? 
A. $1500 
B. $32001 
C. $28000 
D. $33501

2.Which of these groups of numbers would fall into the 
same equivalence class? 
A. $5800; $28000; $32000 
B. $0; $200; $4200 
C. $5200; $5500; $28000 
D. $28001; $32000; $35000


A program validates a numeric field as follows: 
values less than 10 are rejected, 
values between 10 and 21 are accepted, 
values greater than or equal to 22 are rejected 
which of the following input values cover all of the equivalence partitions? 
a. 10,11,21 
b. 3,20,21
c. 3,10,22 
d. 10,21,22

	3.Decision Table Testing
	4.Use Case Testing
-------------------------------------------------------------------------
What is Use Case:-
	>A Document which Describes end to end testing through 
	intraction between User & System as a Real world P.O.V
	>Any One Can Understand since it uses Simple language
	No technical terms is used
	>BA Creates it for Testing
	>Can be used for creating Acceptance Test Cases

Goal : What the user want from system
Pre-Condition:- Set of Condition should be true before Use Case Testing
Actors:	Entity which intracts with system.
	Primary Actor: Who intracts & Starts transaction
	Supporting Actor: Who Supports Primary Actor

Path/Flow:
	1.Normal /Basic :
	2.Alternate :
	3.Error/Exception :

Post-Condition:COndition that must be true after Sucessfull
		Execution of Use Case

Use Case Template:
-------------------
1.Use Case ID: US_Withdraw_001
2.Use Case Goal: To withdraw money from ATM machine
3.Pre-Condition:
		1.User Should have ATM card with Valid PIN
		2.Account & ATM machine should have Balance
		3.ATM candition should be in working condition
4.Actors:
	Primary: User
	Supporting : ATM Card

5.Path: Normal
6.Steps:
	1.U:Enter/Swap ATM Card
	  S:Select Language Message should display 
	2.U:Select Language & Continue
	  S:Enter PIN Message should display
	3.U:Enter PIN & Continue
	  S:Menus Should display

	4.U:Select Withdraw 
	  S:Enter Amount should display
	5.U:Enter Amount & Continue
	  S:Select Account type should Display
	6.U:Select Account Type
	  S:Do you want Receipt Message should display
	7.U:Select Yes or NO for Receipt
	  S:1.After Processing Amount should get Dispensed
	    2.Receipt if Yes for Receipt is Selected

Post -Condition:
	1.Entered Amount should get dispensed
	2.Receipt if Yes for Receipt is Selected 	




	5.State-Transition Testing



2.Structure Based Technique
	Coverage:	Number of Test item covered by Test SUite
		        ------------------------------------------*100
			Total Number of Test Item
	
	1.Statement Coverage
		All Statement Should be Executed atleast once
		
	2.Decision/Branch Coverage
		

Read X
Read Y
if(X>Y)
	Print X
else
	Print Y
endif
SC: 2
DC: 2
----------------------------------------
Read X
Read Y
if(X>Y)
	if(X>50)
		Print X
	else
		print "Hello"
	endif
endif

SC: 2
DC: 3

Read X
Read Y
if(X>Y)
	if(X>50)
		Print X
	else
		print "Hello"
	endif
else
	if(Y>60)	
		print Y
	endif
endif
SC:3
DC:4

Read X
Read Y
if(X>Y)
	if(X>50)
		Print X
	else
		print "Hello"
	endif
else
	if(Y>60)	
		print Y
	else
		Print "BYE"
	endif
endif

3.Experince Based Technique
	1.Error Guessing
	>Random Tesing based on My Experince 
	>AnyOne Can do this But Number of Defects depends updon 
	Experince of Tester
	>It is done in addition of Systematic Testing not 
	Replacement

	2.Exploratory Testing
	>Its Concurrent Test Analysis ,Test Design & Test Execution
	>Only Experince Person should be allowed
	>It can be used in addition or in replacement of Actual Testing
	>It  is TimeBoxed( in slot of 120 minutes)
	>It is followed when Less/ no Documents available
	or in case Severe time pressure 